//! This module contains the implementation of the `RandInt` struct and its methods.

use crate::auto_rng_trait;
use crate::rng::{Rng, RngTrait};
use crate::rng_error::RngError;

pub struct RandInt {
    /// The uniformly distributed random number generator.
    rng: Rng,

    /// The smallest integer to be generated.
    a: i32,

    /// The largest integer to be generated.
    b: i32,

    /// Precomputes (b - a + 1) and stores it to speed up generations.
    range: f64,
}

auto_rng_trait!(RandInt);

impl RandInt {
    /// Creates a new `RandInt` instance with given parameters.
    ///
    /// This method initializes the underlying random number generator using a system-generated seed.
    ///
    /// # Arguments
    ///
    /// * `a` - A `i32` representing the smallest integer to be generated by the distribution.
    ///
    /// * `b` - A `i32` representing the largest integer to be generated by the distribution.
    ///
    /// # Returns
    ///
    /// * `Ok(RandInt)` - Returns an instance of `RandInt` if the `a` is smaller than `b`.
    /// * `Err(RngError)` - Returns a `OrderError` if the values are wrongly ordered.
    pub fn new(a: i32, b: i32) -> Result<Self, RngError> {
        RngError::check_order(a as f64, b as f64)?;

        // Conversions only needed once
        let range: f64 = b as f64 - a as f64 + 1_f64;

        Ok(RandInt {
            rng: Rng::new(),
            a,
            b,
            range,
        })
    }

    /// Generates a random integer between `a` and `b`.
    ///
    /// # Returns
    ///
    /// A `i32` value generated from the `RandInt` distribution.
    pub fn generate(&mut self) -> i32 {
        let uni: f64 = self.rng.generate();

        (self.range * uni).floor() as i32 + self.a
    }
}
